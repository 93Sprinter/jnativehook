<?xml version="1.0" encoding="UTF-8"?>
<!--
  JNativeHook: Global keyboard and mouse hooking for Java.
  Copyright (C) 2006-2020 Alexander Barker.  All Rights Received.
  https://github.com/kwhat/jnativehook/

  JNativeHook is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  JNativeHook is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<project
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.github.kwhat</groupId>
  <artifactId>jnativehook</artifactId>
  <version>2.2-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <maven.compiler.debug>true</maven.compiler.debug>
    <maven.compiler.debuglevel>lines,vars,source</maven.compiler.debuglevel>
    <maven.compiler.compilerId>javac</maven.compiler.compilerId>

    <cmake.download>false</cmake.download>
  </properties>

  <name>JNativeHook</name>
  <description>Global keyboard and mouse listeners for Java.</description>
  <url>https://github.com/kwhat/jnativehook</url>
  <packaging>jar</packaging>
  
  <licenses>
    <license>
      <name>GNU General Public License (GPL), Version 3.0</name>
      <url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
    </license>
    <license>
      <name>GNU Lesser General Public License (LGPL), Version 3.0</name>
      <url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Alexander Barker</name>
      <email>alex@1stleg.com</email>
      <organization>Personal</organization>
      <organizationUrl>https://github.com/kwhat/</organizationUrl>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:https://github.com:kwhat/jnativehook</connection>
    <developerConnection>scm:git:git@github.com:kwhat/jnativehook.git</developerConnection>
    <url>https://github.com:kwhat/jnativehook</url>
  </scm>

  <distributionManagement>
    <repository>
      <id>github</id>
      <name>GitHub Packages</name>
      <url>https://maven.pkg.github.com/kwhat/jnativehook</url>
    </repository>
  </distributionManagement>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>


  <profiles>
    <profile>
      <id>platform-darwin</id>
      <activation>
        <os>
          <name>Mac OS X</name>
          <family>mac</family>
        </os>
      </activation>

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>native-maven-plugin</artifactId>

            <configuration>
              <compilerProvider>generic</compilerProvider>
              <compilerExecutable>${env.CC}</compilerExecutable>

              <compilerStartOptions combine.children="append">
                <compilerStartOption>-fPIC</compilerStartOption>
              </compilerStartOptions>

              <linkerFinalName>lib${project.name}</linkerFinalName>
              <linkerFinalNameExt>dylib</linkerFinalNameExt>

              <linkerStartOptions combine.children="append">
                <linkerMiddleOption>-std=gnu99</linkerMiddleOption>
                <linkerMiddleOption>-shared</linkerMiddleOption>
              </linkerStartOptions>

              <linkerMiddleOptions combine.children="override">
                <linkerMiddleOption>-L${project.build.directory}/generated-sources/lib</linkerMiddleOption>
                <linkerMiddleOption>-Bstatic -luiohook</linkerMiddleOption>

                <linkerMiddleOption>-framework ApplicationServices</linkerMiddleOption>
                <linkerMiddleOption>-framework Carbon</linkerMiddleOption>
                <linkerMiddleOption>-framework IOKit</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lobjc</linkerMiddleOption>
              </linkerMiddleOptions>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>platform-unix</id>
      <activation>
        <os>
          <name>!Mac OS X</name>
          <family>unix</family>
        </os>
      </activation>

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>native-maven-plugin</artifactId>

            <configuration>
              <compilerProvider>generic</compilerProvider>
              <compilerExecutable>${env.CC}</compilerExecutable>

              <compilerStartOptions combine.children="append">
                <compilerStartOption>-fPIC</compilerStartOption>
              </compilerStartOptions>

              <linkerFinalName>lib${project.name}</linkerFinalName>
              <linkerFinalNameExt>so</linkerFinalNameExt>

              <linkerProvider>generic</linkerProvider>
              <linkerExecutable>${env.CC}</linkerExecutable>

              <linkerStartOptions combine.children="append">
                <linkerMiddleOption>-Wl,-z,defs</linkerMiddleOption>
                <linkerMiddleOption>-std=gnu99</linkerMiddleOption>
                <linkerMiddleOption>-shared</linkerMiddleOption>
              </linkerStartOptions>

              <linkerMiddleOptions combine.children="override">
                <linkerMiddleOption>-L${project.build.directory}/generated-sources/lib</linkerMiddleOption>
                <linkerMiddleOption>-Bstatic -luiohook</linkerMiddleOption>

                <linkerMiddleOption>-Bdynamic -lX11</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lxkbfile</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lXt</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lXtst</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lXinerama</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lxcb</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lX11-xcb</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lxkbcommon</linkerMiddleOption>
                <linkerMiddleOption>-Bdynamic -lxkbcommon-x11</linkerMiddleOption>
              </linkerMiddleOptions>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>


    <profile>
      <id>platform-windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>

      <!-- FIXME Remove after cmake plugin hits .17 -->
      <properties>
        <cmake.download>true</cmake.download>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>native-maven-plugin</artifactId>

            <configuration>
              <compilerProvider>msvc</compilerProvider>
              <javahOS>win32</javahOS>

              <compilerStartOptions combine.children="append">
                <compilerStartOption>/MDd</compilerStartOption>
                <compilerStartOption>/Zi</compilerStartOption>
              </compilerStartOptions>

              <compilerEndOptions>
                <compilerEndOption>/I${project.basedir}\src\main\jni\include</compilerEndOption>
                <compilerEndOption>/I${project.build.directory}\generated-sources\include</compilerEndOption>
              </compilerEndOptions>

              <linkerFinalName>${project.name}</linkerFinalName>
              <linkerFinalNameExt>dll</linkerFinalNameExt>

              <linkerStartOptions combine.children="append">
                <linkerMiddleOption>/INCREMENTAL:NO</linkerMiddleOption>
                <linkerMiddleOption>/DLL</linkerMiddleOption>
              </linkerStartOptions>

              <linkerMiddleOptions combine.children="override">
                <linkerMiddleOption>/LIBPATH:${project.build.directory}/generated-sources/lib</linkerMiddleOption>
                <linkerMiddleOption>uiohook.lib</linkerMiddleOption>
                <linkerMiddleOption>advapi32.lib</linkerMiddleOption>
                <linkerMiddleOption>user32.lib</linkerMiddleOption>
              </linkerMiddleOptions>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>


    <profile>
      <id>java-jdk5</id>
      <activation>
        <jdk>[5,)</jdk>
      </activation>

      <properties>
        <maven.compiler.source>5</maven.compiler.source>
        <maven.compiler.target>5</maven.compiler.target>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>

            <executions>
              <execution>
                <id>java-compile</id>
                <phase>compile</phase>
                <!--goals>
                  <goal>compile</goal>
                </goals-->

                <configuration>
                  <excludes>
                    <exclude>module-info.java</exclude>
                  </excludes>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>native-maven-plugin</artifactId>

            <configuration>
              <javahClassNames>
                <javahClassName>org.jnativehook.GlobalScreen</javahClassName>
              </javahClassNames>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>java-jdk8</id>
      <activation>
        <jdk>[8,)</jdk>
      </activation>

      <properties>
        <maven.compiler.source>5</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>

            <executions>
              <execution>
                <id>java-compile</id>
                <phase>compile</phase>
                <!--goals>
                  <goal>compile</goal>
                </goals-->

                <configuration>
                  <excludes>
                    <exclude>module-info.java</exclude>
                  </excludes>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>java-jdk11</id>
      <activation>
        <jdk>[11,)</jdk>
      </activation>

      <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>

            <executions>
              <execution>
                <id>java-compile</id>
                <phase>compile</phase>
                <!--goals>
                  <goal>compile</goal>
                </goals-->

                <configuration>
                  <release>11</release>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>

  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.7</version>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.1.0</version>

        <executions>
          <execution>
            <id>parse-version</id>
            <goals>
              <goal>parse-version</goal>
            </goals>

            <configuration>
              <propertyPrefix>maven.version</propertyPrefix>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.0.0</version>

        <executions>
          <execution>
            <id>ant-initialize</id>
            <phase>initialize</phase>
            <goals>
              <goal>run</goal>
            </goals>

            <configuration>
              <exportAntProperties>true</exportAntProperties>
              <target>
                <!-- Set the operating system name used for organizing native libraries -->
                <condition property="jni.os" value="darwin">
                  <and>
                    <os family="mac" />
                    <os family="unix" />
                  </and>
                </condition>
                <condition property="jni.os" value="freebsd">
                  <os family="unix" name="FreeBSD" />
                </condition>
                <condition property="jni.os" value="linux">
                  <os family="unix" name="Linux" />
                </condition>
                <condition property="jni.os" value="openbsd">
                  <os family="unix" name="OpenBSD" />
                </condition>
                <condition property="jni.os" value="solaris">
                  <or>
                    <os family="unix" name="Solaris" />
                    <os family="unix" name="SunOS" />
                  </or>
                </condition>
                <condition property="jni.os" value="windows">
                  <or>
                    <os family="windows" />
                    <os family="winnt" />
                  </or>
                </condition>
                <fail message="Could not determine jni.os.  Please set this property to your target operating systm.">
                  <condition>
                    <not>
                      <isset property="jni.os" />
                    </not>
                  </condition>
                </fail>

                <!-- Set the system arch name used for organizing native libraries -->
                <condition property="jni.arch" value="arm">
                  <or>
                    <os arch="arm" />
                    <os arch="aarch32" />
                  </or>
                </condition>
                <condition property="jni.arch" value="arm64">
                  <or>
                    <os arch="arm64" />
                    <os arch="aarch64" />
                  </or>
                </condition>
                <condition property="jni.arch" value="ppc">
                  <or>
                    <os arch="ppc" />
                    <os arch="PowerPC" />
                  </or>
                </condition>
                <condition property="jni.arch" value="ppc64">
                  <or>
                    <os arch="ppc64" />
                    <os arch="PowerPC64" />
                  </or>
                </condition>
                <condition property="jni.arch" value="x86">
                  <or>
                    <os arch="x86" />
                    <os arch="i386" />
                    <os arch="i486" />
                    <os arch="i586" />
                    <os arch="i686" />
                  </or>
                </condition>
                <condition property="jni.arch" value="x86_64">
                  <or>
                    <os arch="x86-64" />
                    <os arch="x86_64" />
                    <os arch="amd64" />
                    <os arch="k8" />
                  </or>
                </condition>
                <property name="jni.arch" value="${os.arch}" />

                <echo level="info">JNI OS:          ${jni.os}</echo>
                <echo level="info">JNI Arch:        ${jni.arch}</echo>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>3.6</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>auto-clean</id>
            <phase>initialize</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>

        <configuration>
          <verbose>true</verbose>
          <fork>true</fork>

          <compileSourceRoots>
            <compileSourceRoot>${basedir}/src/main/java</compileSourceRoot>
          </compileSourceRoots>

          <compilerArgs>
            <arg>-h</arg>
            <arg>${project.build.directory}/generated-sources/include</arg>
          </compilerArgs>
        </configuration>
      </plugin>


      <plugin>
        <groupId>com.googlecode.cmake-maven-project</groupId>
        <artifactId>cmake-maven-plugin</artifactId>
        <version>3.16.3-b2</version>

        <executions>
          <execution>
            <id>cmake-generate</id>
            <goals>
              <goal>generate</goal>
            </goals>

            <configuration>
              <sourcePath>${project.basedir}/src/external/libuiohook</sourcePath>
              <targetPath>${project.build.directory}/libuiohook-build</targetPath>

              <options>
                <option>-DCMAKE_VERBOSE_MAKEFILE=true</option>
                <option>-DCMAKE_INSTALL_PREFIX=${project.build.directory}/generated-sources</option>
                <option>-DCMAKE_INSTALL_LIBDIR=lib</option>

                <option>-DENABLE_STATIC=ON</option>
                <option>-DENABLE_SHARED=OFF</option>
              </options>
            </configuration>
          </execution>

          <execution>
            <id>cmake-compile</id>
            <goals>
              <goal>compile</goal>
            </goals>

            <configuration>
              <projectDirectory>${project.build.directory}/libuiohook-build</projectDirectory>

              <options>
                <option>--target</option>
                <option>install</option>
              </options>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>native-maven-plugin</artifactId>
        <version>1.0-alpha-11</version>

        <configuration>
          <jdkIncludePath>${java.home}/include</jdkIncludePath>
          <javahOS>${jni.os}</javahOS>

          <compilerStartOptions>
            <compilerStartOption>${env.CFLAGS}</compilerStartOption>
          </compilerStartOptions>

          <linkerOutputDirectory>${project.build.directory}/generated-sources/lib</linkerOutputDirectory>
          <attach>false</attach>

          <linkerStartOptions>
            <linkerStartOption>${env.LDFLAGS}</linkerStartOption>
          </linkerStartOptions>

          <sources>
            <source>
              <directory>${project.basedir}/src/main/jni</directory>
              <fileNames>
                <fileName>jni_Converter.c</fileName>
                <fileName>jni_Errors.c</fileName>
                <fileName>jni_EventDispatcher.c</fileName>
                <fileName>jni_Globals.c</fileName>
                <fileName>jni_Load.c</fileName>
                <fileName>jni_Logger.c</fileName>
                <fileName>org_jnativehook_GlobalScreen.c</fileName>
              </fileNames>
            </source>

            <source>
              <directory>${project.basedir}/src/main/jni/include</directory>
            </source>

            <source>
              <directory>${project.build.directory}/generated-sources/include</directory>
            </source>
          </sources>
        </configuration>

        <executions>
          <execution>
            <id>jni-compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>

          <execution>
            <id>jni-link</id>
            <phase>compile</phase>
            <goals>
              <goal>link</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.1.0</version>

        <executions>
          <execution>
            <id>jni-resources</id>
            <phase>compile</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>

            <configuration>
              <outputDirectory>${project.basedir}/src/main/resources/org/${project.artifactId}/lib/${jni.os}/${jni.arch}</outputDirectory>

              <resources>
                <resource>
                  <directory>${project.build.directory}/generated-sources/lib</directory>
                  <includes>
                    <include>*${project.name}.*</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>package-resources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>

            <configuration>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>

              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/resources</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M4</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>3.2.0</version>
        
        <executions>
          <execution>
            <id>package-javadoc</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>

        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <mainClass>org.jnativehook.example.NativeHookDemo</mainClass>

              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>

            <manifestEntries>
              <url>${project.scm.url}</url>
            </manifestEntries>

            <manifestSections>
              <manifestSection>
                <name>org/jnativehook</name>
                <manifestEntries>
                  <Specification-Title>${project.name} Library"</Specification-Title>
                  <Specification-Version>${maven.version.majorVersion}.${maven.version.minorVersion}</Specification-Version>
                  <Specification-Vendor>Alexander Barker (alex@1stleg.com)</Specification-Vendor>

                  <Implementation-Title>${project.groupId}</Implementation-Title>
                  <Implementation-Version>${maven.version.incrementalVersion}${maven.version.qualifier?}</Implementation-Version>
                  <Implementation-Vendor>${project.build.version}</Implementation-Vendor>
                </manifestEntries>
              </manifestSection>
            </manifestSections>
          </archive>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-install-plugin</artifactId>
        <version>3.0.0-M1</version>
      </plugin>

      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>3.0.0-M1</version>
      </plugin>

      <plugin>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.9.0</version>
      </plugin>
    </plugins>
  </build>
</project>
